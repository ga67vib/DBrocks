-- tables for entities
-- relations that can be merged into a table (i.e. they have cardinality 1 on some side) have already been merged

CREATE TABLE Area(
area_id			Serial			Primary Key,
size			Integer			NOT NULL,
location 		Integer		NOT NULL
);

CREATE TABLE ConcertArea(
area_id			Integer		Primary Key references Area(area_id),
style			Varchar(64)	NOT NULL
);

CREATE TABLE Stage(
stage_id			Serial		Primary Key,
is_in			Integer		references Area(area_id) NOT NULL, 
stage_name		Varchar(64)	NOT NULL,
audit_size		Integer		NOT NULL,
stage_size		Integer		NOT NULL
);

CREATE TABLE Band(
band_id			Serial		Primary Key,
band_name		Varchar(64)	NOT NULL,
salary			Decimal(15,2)	NOT NULL,
songlist		Varchar(512),
instruction 		Varchar(512)	
);



CREATE TABLE Performance(
performance_id		Serial		Primary Key,
is_at			Integer		references Stage(stage_id) NOT NULL,
start_build_up		Timestamp	NOT NULL,
start_time		Timestamp	NOT NULL,
end_time		Timestamp	NOT NULL,
end_removal		Timestamp	NOT NULL
);


CREATE TABLE Sponsor(
sponsor_id		Serial		Primary Key,
address			Varchar(64)	NOT NULL,
payment			Decimal(15,2)	NOT NULL,
num_req_booths		Integer		NOT NULL,
num_ass_booths		Integer		NOT NULL DEFAULT 0,
name			Varchar(64) NOT NULL
);

CREATE TABLE Booth(
booth_id		Serial		Primary Key,
owned_by 		Integer 		references Sponsor(sponsor_id) NOT NULL,
is_in			Integer		references Area(area_id) NOT NULL,
spec_req		Varchar(512),
size 			Integer		NOT NULL,
name 			Varchar(64),
type Varchar(64) 	NOT NULL
);

CREATE TABLE Person(
person_id		Serial		Primary Key,
birthdate		Date 		NOT NULL,
gender			Varchar(1)	NOT NULL,
mail 			Varchar(64)  	NOT NULL,
address 			Varchar(64)	NOT NULL,
first_name		Varchar(64)	NOT NULL,
last_name		Varchar(64)	NOT NULL,
phone_number 		Varchar(64),
do_notify		Boolean		NOT NULL,
password		Varchar(64)
);

CREATE TABLE Visitor(
person_id		Integer		Primary Key references Person(person_id),
preferred_genre		Varchar(64)	
);

CREATE TABLE Staff(
person_id		Integer		Primary Key references Person(person_id),
profession		Varchar(64)	NOT NULL,
salary			Decimal(15,2)	NOT NULL
);

CREATE TABLE Note(
note_id			Serial		Primary Key,
content			Varchar(512) 	NOT NULL,
creation_time		Timestamp	NOT NULL,
done			Boolean		NOT NULL
);

CREATE TABLE RFID_Ticket(
ticket_id			Serial		Primary Key,
owned_by 		Integer		references Person(person_id) NOT NULL,
acct_bal			Decimal(15,2) 	NOT NULL DEFAULT 0.00,
is_Camper		Boolean	 	NOT NULL,
is_VIP			Boolean		NOT NULL,
price			Integer		NOT NULL,
purchase_Date		Date		NOT NULL,
valid_From		Date		NOT NULL,
valid_Until		Date		NOT NULL
);




CREATE TABLE Product(
product_id		Serial		Primary Key,
price			Decimal(15,2) 	NOT NULL,
name 			Varchar(64) 	NOT NULL,
add_Info		VARCHAR(512)
);

CREATE TABLE Shift(
shift_id			Serial		Primary Key,
start_time		Timestamp	NOT NULL,
end_time		Timestamp	NOT NULL
);

-- Relations that are not merged into another table

CREATE TABLE timetable(
performance_id		Integer		references Performance(performance_id),
person_id		Integer		references Visitor(person_id),
Primary Key (performance_id, person_id)
);

CREATE TABLE rocks(
band_id			Integer		references Band(band_id),
performance_id		Integer		references Performance(performance_id),
Primary Key (band_id, performance_id)
);

CREATE TABLE transaction(
transaction_id 		Serial		Primary Key,
product_id		Integer		references Product(product_id),
ticket_id 		Integer 		references RFID_Ticket(ticket_id),
booth_id		Integer		references Booth(booth_id),
transaction_time		Timestamp	NOT NULL
);

CREATE TABLE sells(
booth_id 		Integer 		references Booth(booth_id),
product_id		Integer		references Product(product_id)
);

CREATE TABLE advertising(
sponsor_id 		Integer 		references Sponsor(sponsor_id),
area_id			Integer		references Area(area_id),
type Varchar(64)		NOT NULL
);

CREATE TABLE works(
shift_id 			Integer 		references Shift(shift_id),
person_id		Integer		references Staff(person_id)
);

CREATE TABLE located(
shift_id 			Integer 		references Shift(shift_id),
area_id			Integer		references Area(area_id)
);

CREATE TABLE assigned_to(
person_id 		Integer 		references Person(person_id),
note_id			Integer		references Note(note_id)
);




